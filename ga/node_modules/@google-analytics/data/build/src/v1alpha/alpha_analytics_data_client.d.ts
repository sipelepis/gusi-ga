import type * as gax from 'google-gax';
import type { Callback, CallOptions, Descriptors, ClientOptions } from 'google-gax';
import * as protos from '../../protos/protos';
/**
 *  Google Analytics reporting data service.
 * @class
 * @memberof v1alpha
 */
export declare class AlphaAnalyticsDataClient {
    private _terminated;
    private _opts;
    private _providedCustomServicePath;
    private _gaxModule;
    private _gaxGrpc;
    private _protos;
    private _defaults;
    auth: gax.GoogleAuth;
    descriptors: Descriptors;
    warn: (code: string, message: string, warnType?: string) => void;
    innerApiCalls: {
        [name: string]: Function;
    };
    alphaAnalyticsDataStub?: Promise<{
        [name: string]: Function;
    }>;
    /**
     * Construct an instance of AlphaAnalyticsDataClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean | "rest"} [options.fallback] - Use HTTP fallback mode.
     *     Pass "rest" to use HTTP/1.1 REST API instead of gRPC.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new AlphaAnalyticsDataClient({fallback: 'rest'}, gax);
     *     ```
     */
    constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback);
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize(): Promise<{
        [name: string]: Function;
    }>;
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath(): string;
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint(): string;
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port(): number;
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes(): string[];
    getProjectId(): Promise<string>;
    getProjectId(callback: Callback<string, undefined, undefined>): void;
    /**
     * Returns a customized funnel report of your Google Analytics event data. The
     * data returned from the API is as a table with columns for the requested
     * dimensions and metrics.
     *
     * Funnel exploration lets you visualize the steps your users take to complete
     * a task and quickly see how well they are succeeding or failing at each
     * step. For example, how do prospects become shoppers and then become buyers?
     * How do one time buyers become repeat buyers? With this information, you can
     * improve inefficient or abandoned customer journeys. To learn more, see [GA4
     * Funnel Explorations](https://support.google.com/analytics/answer/9327974).
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.property
     *   A Google Analytics GA4 property identifier whose events are tracked.
     *   Specified in the URL path and not the body. To learn more, see [where to
     *   find your Property
     *   ID](https://developers.google.com/analytics/devguides/reporting/data/v1/property-id).
     *   Within a batch request, this property should either be unspecified or
     *   consistent with the batch-level property.
     *
     *   Example: properties/1234
     * @param {number[]} request.dateRanges
     *   Date ranges of data to read. If multiple date ranges are requested, each
     *   response row will contain a zero based date range index. If two date
     *   ranges overlap, the event data for the overlapping days is included in the
     *   response rows for both date ranges.
     * @param {google.analytics.data.v1alpha.Funnel} request.funnel
     *   The configuration of this request's funnel. This funnel configuration is
     *   required.
     * @param {google.analytics.data.v1alpha.FunnelBreakdown} request.funnelBreakdown
     *   If specified, this breakdown adds a dimension to the funnel table sub
     *   report response. This breakdown dimension expands each funnel step to the
     *   unique values of the breakdown dimension. For example, a breakdown by the
     *   `deviceCategory` dimension will create rows for `mobile`, `tablet`,
     *   `desktop`, and the total.
     * @param {google.analytics.data.v1alpha.FunnelNextAction} request.funnelNextAction
     *   If specified, next action adds a dimension to the funnel visualization sub
     *   report response. This next action dimension expands each funnel step to the
     *   unique values of the next action. For example a next action of the
     *   `eventName` dimension will create rows for several events (i.e.
     *   `session_start` & `click`) and the total.
     *
     *   Next action only supports `eventName` and most Page / Screen dimensions
     *   like `pageTitle` and `pagePath`.
     * @param {google.analytics.data.v1alpha.RunFunnelReportRequest.FunnelVisualizationType} request.funnelVisualizationType
     *   The funnel visualization type controls the dimensions present in the funnel
     *   visualization sub report response. If not specified, `STANDARD_FUNNEL` is
     *   used.
     * @param {number[]} request.segments
     *   The configurations of segments. Segments are subsets of a property's data.
     *   In a funnel report with segments, the funnel is evaluated in each segment.
     *
     *   Each segment specified in this request
     *   produces a separate row in the response; in the response, each segment
     *   identified by its name.
     *
     *   The segments parameter is optional. Requests are limited to 4 segments.
     * @param {number} request.limit
     *   The number of rows to return. If unspecified, 10,000 rows are returned. The
     *   API returns a maximum of 100,000 rows per request, no matter how many you
     *   ask for. `limit` must be positive.
     *
     *   The API can also return fewer rows than the requested `limit`, if there
     *   aren't as many dimension values as the `limit`.
     * @param {google.analytics.data.v1alpha.FilterExpression} request.dimensionFilter
     *   Dimension filters allow you to ask for only specific dimension values in
     *   the report. To learn more, see [Creating a Report: Dimension
     *   Filters](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#dimension_filters)
     *   for examples. Metrics cannot be used in this filter.
     * @param {boolean} request.returnPropertyQuota
     *   Toggles whether to return the current state of this Analytics Property's
     *   quota. Quota is returned in [PropertyQuota](#PropertyQuota).
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing [RunFunnelReportResponse]{@link google.analytics.data.v1alpha.RunFunnelReportResponse}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1alpha/alpha_analytics_data.run_funnel_report.js</caption>
     * region_tag:analyticsdata_v1alpha_generated_AlphaAnalyticsData_RunFunnelReport_async
     */
    runFunnelReport(request?: protos.google.analytics.data.v1alpha.IRunFunnelReportRequest, options?: CallOptions): Promise<[
        protos.google.analytics.data.v1alpha.IRunFunnelReportResponse,
        protos.google.analytics.data.v1alpha.IRunFunnelReportRequest | undefined,
        {} | undefined
    ]>;
    runFunnelReport(request: protos.google.analytics.data.v1alpha.IRunFunnelReportRequest, options: CallOptions, callback: Callback<protos.google.analytics.data.v1alpha.IRunFunnelReportResponse, protos.google.analytics.data.v1alpha.IRunFunnelReportRequest | null | undefined, {} | null | undefined>): void;
    runFunnelReport(request: protos.google.analytics.data.v1alpha.IRunFunnelReportRequest, callback: Callback<protos.google.analytics.data.v1alpha.IRunFunnelReportResponse, protos.google.analytics.data.v1alpha.IRunFunnelReportRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close(): Promise<void>;
}
